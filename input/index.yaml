# Froggy ROOT INDEX YAML

project: world
title: The World
name: world
dir: ROOT
description: >
  This is The World. It contains minerals (inorganic substances), plants and animals. In this project, everything 
  is categorized under mineral, plant or animal, with sub-categories under those top-level categories and so on. 
  Each 'thing' in The World, including categories and sub-categories themselves are nodes on the tree 
  of The World, and the entire tree is rooted in a single 'root node' where the tree begins.
  
  In terms of data structures, the input structure is a D.A.G. or a 'directed acyclic graph' with the informal term
  simply being 'a tree'. A filesystem or a portion thereof (files and folders inside of files and folders) represent
  a tree or a directed acyclic graph (DAG). Acyclic means there are no loops. No branches connect back to any part of
  the tree to create any loops. (We don't currently allow symlinks, and until we do, loops are not even possible
  using folders and files in a filesystem. If we allow symlinks in Froggy as we might allow later, then loops will
  be possible and we will then be dealing with a directed cyclic graph or a DCG, not a DAG.) The practical impact
  of having no loops (for now) means that the tree must be traversed up and down along branches and the normal thing
  is to start at the root of the tree. This is how Froggy processes and what Froggy is all about: tree traversal.
  
  Now if we later allow symlinks in the directories linking to other directories in the input structure, then we will
  effectively be allowing loops, which in browsing terms would simply be links back to somewhere else 'within' the
  tree. This might be useful to link related topics or closely-connected nodes on the tree or for similar features,
  but the processing becomes a bit more complex so any feature like this will come later. For now, the output will
  be a simple (DAG) tree just like the input will be and navigation will tend to originate from the root downwards
  or generally top-down through categories and sub-categories in a traditional filesystem-like hierarchy.

##
#
